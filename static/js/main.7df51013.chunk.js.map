{"version":3,"sources":["services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","routes/index.tsx","assets/background.svg","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Repos","div","Error","span","Dashboard","useState","storageRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","newRepositories","setNewRepositories","inputError","setInputError","invalidRepository","setInvalidRepository","formEl","useRef","useEffect","setItem","stringify","handleAddRepo","a","get","response","repository","data","current","reset","ref","placeholder","onChange","event","target","value","type","onClick","map","to","full_name","src","owner","avatar_url","alt","login","description","size","Routes","exact","path","component","GlobalStyle","createGlobalStyle","imgBackground","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAEaA,E,OAAMC,EAAMC,OAAO,CAC9BC,QAAS,2B,sBCIEC,EAAQC,IAAOC,GAAV,2JASLC,EAAOF,IAAOG,KAAV,wnBAcX,SAAAC,GAAK,OACLA,EAAMC,UACNC,YADA,oEAwBoBC,YAAM,GAAK,YAKxBC,EAAQR,IAAOS,IAAV,yyBAmDLC,EAAQV,IAAOW,KAAV,sF,OCHHC,EA5Fa,WAAO,IAAD,EACQC,oBAA6B,WACnE,IAAMC,EAAsBC,aAAaC,QACvC,+BAGF,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,MATuB,mBACzBK,EADyB,KACXC,EADW,OAWcP,mBAAS,IAXvB,mBAWzBQ,EAXyB,KAWRC,EAXQ,OAYIT,mBAAS,IAZb,mBAYzBU,EAZyB,KAYbC,EAZa,OAakBX,mBAAS,IAb3B,mBAazBY,EAbyB,KAaNC,EAbM,KAc1BC,EAASC,iBAA+B,MAE9CC,qBAAU,WACRd,aAAae,QACX,8BACAb,KAAKc,UAAUZ,MAEhB,CAACA,IAEJ,IAQMa,EAAa,uCAAG,gCAAAC,EAAA,yDACfZ,EADe,uBAElBG,EAAc,iCAFI,mDAOK7B,EAAIuC,IAAJ,gBACZb,IARO,OAOZc,EAPY,OAWZC,EAAaD,EAASE,KAE5BjB,EAAgB,GAAD,mBAAKD,GAAL,CAAmBiB,KAGlC,UAAAT,EAAOW,eAAP,SAAgBC,QAChBjB,EAAmB,IAjBD,kDAmBlBI,EAAqB,uCAnBH,0DAAH,qDAuBnB,OACE,qCACE,cAAC3B,EAAD,uDACA,eAACG,EAAD,CAAMsC,IAAKb,EAAQtB,WAAYkB,EAA/B,UACE,uBACEkB,YAAY,2BACZC,SArCkB,SACxBC,GAEArB,EAAmBqB,EAAMC,OAAOC,OAChCrB,EAAc,IACdE,EAAqB,OAkCjB,wBAAQoB,KAAK,SAASC,QAASf,EAA/B,uBAKDT,GAAc,cAACb,EAAD,UAAQa,IACtBE,GAAqB,cAACf,EAAD,UAAQe,IAE9B,cAACjB,EAAD,UACGW,EAAa6B,KAAI,SAAAZ,GAAU,OAC1B,eAAC,IAAD,CACEa,GAAE,wBAAmBb,EAAWc,WADlC,UAIE,qBACEC,IAAKf,EAAWgB,MAAMC,WACtBC,IAAKlB,EAAWgB,MAAMG,QAExB,gCACE,iCAASnB,EAAWc,YACpB,4BAAId,EAAWoB,iBAEjB,cAAC,IAAD,CAAgBC,KAAM,OAVjBrB,EAAWc,oBCtFfQ,EAAmB,WAC9B,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWjD,SCRvC,MAA0B,uCCG5BkD,EAAcC,YAAH,ssBAkBMC,GCPfC,EATO,WACpB,OACE,qCACE,cAAC,EAAD,IACA,cAACH,EAAD,QCLNI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7df51013.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  color: #3a3a3a;\n  font-size: 48px;\n  line-height: 56px;\n  margin-bottom: 64px;\n  margin-top: 40px;\n  max-width: 450px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 2px solid #fff;\n    border-radius: 8px 0 0 8px;\n    color: #3a3a3a;\n    border-right: 0;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n\n    &:focus {\n      outline: none;\n    }\n  }\n\n  button {\n    width: 160px;\n    background-color: #0000cc;\n    border-radius: 0 8px 8px 0;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background-color: ${shade(0.2, '#0000cc')};\n    }\n  }\n`;\n\nexport const Repos = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(6px);\n    }\n\n    // coloca esse estilos apenas a partir da segunda tag a\n    & + a {\n      margin-top: 16px;\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #0000cc;\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { api } from '../../services/api';\nimport { Link } from 'react-router-dom';\n\nimport { Title, Form, Repos, Error } from './styles';\n\ninterface GithubRepository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [repositories, setRepositories] = useState<GithubRepository[]>(() => {\n    const storageRepositories = localStorage.getItem(\n      '@GitCollection:repositories',\n    );\n\n    if (storageRepositories) {\n      return JSON.parse(storageRepositories);\n    }\n    return [];\n  });\n  const [newRepositories, setNewRepositories] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [invalidRepository, setInvalidRepository] = useState('');\n  const formEl = useRef<HTMLFormElement | null>(null);\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GitCollection:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    setNewRepositories(event.target.value);\n    setInputError('');\n    setInvalidRepository('');\n  };\n\n  const handleAddRepo = async (): Promise<void> => {\n    if (!newRepositories) {\n      setInputError('Informe o username/repository');\n      return;\n    }\n\n    try {\n      const response = await api.get<GithubRepository>(\n        `repos/${newRepositories}`,\n      );\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n\n      /** O método 'current' me da acesso de fato ao elemento, e o 'reset()' reseta o elemento */\n      formEl.current?.reset();\n      setNewRepositories('');\n    } catch (err) {\n      setInvalidRepository('Informe um repositório válido');\n    }\n  };\n\n  return (\n    <>\n      <Title>Catálogo de repositórios do github</Title>\n      <Form ref={formEl} hasError={!!inputError}>\n        <input\n          placeholder=\"username/repository_name\"\n          onChange={handleInputChange}\n        />\n        <button type=\"button\" onClick={handleAddRepo}>\n          Buscar\n        </button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n      {invalidRepository && <Error>{invalidRepository}</Error>}\n\n      <Repos>\n        {repositories.map(repository => (\n          <Link\n            to={`/repositories/${repository.full_name}`}\n            key={repository.full_name}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repos>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Dashboard from '../pages/Dashboard';\n\nexport const Routes: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/gitcollection\" component={Dashboard} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/background.a0394ab9.svg\";","import { createGlobalStyle } from 'styled-components';\nimport imgBackground from '../assets/background.svg';\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%;\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%;\n    }\n  }\n\n  body {\n    background: #f0f0f5 url(${imgBackground}) no-repeat top;\n    background-size: 800px;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  border-style, input, textarea, select, button, h1, h2, h3, h4, h5, h6 {\n    font: 400 1rem \"Raleway\", sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 2.5rem 1.25rem;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n","import React from 'react';\nimport { Routes } from './routes';\n\nimport { GlobalStyle } from './styles/global';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Routes />\n      <GlobalStyle />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}